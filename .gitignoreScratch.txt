TO DO:

- split object 
  - into multiple classes via inheritance

- create hub
  - this will consist of 8? doors, each unlocking 
    after the previous is completed
  - doors will be brown and have a gold handle if
    openable, else a gray pillar (or maybe nothing)
  - hubs will lead to memory events, which will
    be the actual gameplay. a memory is "completed"
    iff all objects are interacted with.
  - memory events may have futher transitions within,
    such as a door within the memory you walk through

- reorganize display / asset files
  - i dont want to have to pull from display every time
    i want to use a color, so fix it so maybe everything
    is stored in assets? maybe only colors and fonts

- title screen
  - display controls and the title
  - maybe add the inspiration from three women

Organization:

- Main
- assets
  - acsesses enums
  - called by main,
  - assigned to objects
- display
  - acsesses enums
  - called by main with parameters
- entities
  - accseses enums
  - driven by main, 
  - passed to display for displaying
- enums
  - acsessed by all but input
- input
  - only talks to main

figuring out transition / text reading
if text == "" and destination == -1 -> do nothing
if text != "" and destination == -1 -> read text
if text == "" and destination != -1 -> send to transition
if text != "" and destination != -1 -> read text, then transition

player:
  vars:
    rect
    color
    velocity
    bounds?
    speedmodifer
  methods:
    update position
    check boundary collision
    check object collision
objects:
  vars: 
    rect
    color
    text
    interacted
doors:
  vars:
    rect
    color
    text
    locked
  methods:
    lock/unlock

rooms
- parents arguing
- first experiences of gender
- mom upset in book store
- failing to make friends at school
- first feelings of queerness
- self harm
- toxic gay relationships
- scared of ruining new relationships


  